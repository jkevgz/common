<?php

use Drupal\Core\Config\Entity\ConfigEntityType;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\task\TaskBundleListBuilder;

/**
 * Install Massive Task Improvements.
 */
function task_update_8002() {
  try {
    $entity_type_manager = \Drupal::entityTypeManager();
    $updater = \Drupal::entityDefinitionUpdateManager();

    // Task Bundle.
    $updater->installEntityType(new ConfigEntityType([
      'id' => 'task_bundle',
      'label' => new TranslatableMarkup('Task Bundle'),
      'config_prefix' => 'task_bundle',
      'provider' => 'task',
      'handlers' => [
        'storage' => \Drupal\Core\Config\Entity\ConfigEntityStorage::class,
        'form' => [
          'add' => \Drupal\task\Form\TaskBundleForm::class,
          'edit' => \Drupal\task\Form\TaskBundleForm::class,
        ],
        'list_builder' => TaskBundleListBuilder::class,
        'route_provider' => [
          'html' => \Drupal\Core\Entity\Routing\DefaultHtmlRouteProvider::class,
        ],
      ],
      'bundle_of' => 'task',
      'admin_permission' => 'administer task bundles',
      'entity_keys' => [
        'id' => 'id',
        'label' => 'label',
      ],
      'config_export' => [
        'id' => 'id',
        'label' => 'label',
      ],
    ]));

    \Drupal::typedDataManager()->clearCachedDefinitions();
    \Drupal::service('config.typed')->clearCachedDefinitions();
    $task_bundle_storage = $entity_type_manager->getStorage('task_bundle');
    if (!$task_bundle_storage->load('default')) {
      $task_bundle_storage->create([
        'id' => 'default',
        'label' => 'Default',
      ])->save();
    }

    // Add the bundle field to task entities.
    if (!$updater->getFieldStorageDefinition('type', 'task')) {
      $updater->installFieldStorageDefinition(
        'type',
        'task',
        'task',
        BaseFieldDefinition::create('entity_reference')
          ->setSetting('target_type', 'task_bundle')
          ->setLabel(t('Bundle'))
          ->setRequired(TRUE)
          ->setReadOnly(TRUE)
      );

      \Drupal::database()
        ->update('task')
        ->fields(['type' => 'default'])
        ->execute();
    }
  }
  catch (\Exception $e) {
    throw $e;
  }
}
