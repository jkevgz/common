<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\ctools_block\Plugin\Block\EntityField;
use Drupal\flexilayout_builder\Entity\FlexibleLayoutBuilderEntityViewDisplay;
use Drupal\flexilayout_builder\LayoutThirdPartySettingsInterface;
use Drupal\flexilayout_builder\Plugin\SectionStorage\DefaultsSectionStorage;
use Drupal\flexilayout_builder\Plugin\SectionStorage\OverridesSectionStorage;
use Drupal\layout_builder\DefaultsSectionStorageInterface;
use Drupal\layout_builder\Plugin\Block\FieldBlock;

/**
 * Implements hook_entity_type_alter().
 */
function flexilayout_builder_entity_type_alter(array &$entity_types) {
  $entity_types['entity_view_display']
    ->setClass(FlexibleLayoutBuilderEntityViewDisplay::class);
}

/**
 * Implements hook_element_info_alter
 *
 * The pre_render callback added here adds a "Manage Context" link to the interface
 * that allows the addition of static contexts and relationships.
 *
 * @param array $info
 */
function flexilayout_builder_element_info_alter(array &$info) {
  $info['layout_builder']['#pre_render'][] = 'flexilayout_builder_layout_builder_context_control_pre_render';
}

/**
 * Implements hook_layout_builder_section_storage().
 *
 * We change the default section storage class to make sure we can store layout
 * wide third party settings.
 */
function flexilayout_builder_layout_builder_section_storage_alter(&$definitions) {
  $definitions['defaults']->setClass(DefaultsSectionStorage::class);
  $definitions['overrides']->setClass(OverridesSectionStorage::class);
}

/**
 * Implements hook_builder_module_implements_alter().
 */
function flexilayout_builder_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'entity_type_alter') {
    // Ensure that this module's implementation of hook_entity_type_alter() runs
    // last so that our entity class is used for entity_view_Display entities.
    $group = $implementations['flexilayout_builder'];
    unset($implementations['flexilayout_builder']);
    $implementations['flexilayout_builder'] = $group;
  }
}

/**
 * Pre render the layout builder interface to add the context controls.
 */
function flexilayout_builder_layout_builder_context_control_pre_render($element) {
  $section_storage = $element['#section_storage'];
  if (!($section_storage instanceof LayoutThirdPartySettingsInterface)) {
    return $element;
  }

  $element['layout_builder']['#weight'] = 100;
  $element['context_controls'] = [
    '#type' => 'container',
    '#weight' => -100,
    '#attributes' => [
      'id' => 'layout-builder--context-controls',
      'class' => ['layout-builder--context-controls'],
    ],
  ];
  $element['context_controls']['manage_context'] = [
    '#type' => 'link',
    '#title' => t('Manage Context'),
    '#url' => Url::fromRoute('flexilayout_builder.view_context', [
      'section_storage_type' => $section_storage->getStorageType(),
      'section_storage' => $section_storage->getStorageId(),
    ]),
    '#attributes' => [
      'class' => ['use-ajax'],
      'data-dialog-type' => 'dialog',
      'data-dialog-renderer' => 'off_canvas',
    ],
  ];

  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flexilayout_builder_form_layout_builder_add_block_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionStorageInterface $section_storage */
  list($section_storage, $delta, $region, $plugin_id) = $form_state->getBuildInfo()['args'];
  $form_state->set('section_storage', $section_storage);
  $form_state->set('flb__component', $form_state->get('layout_builder__component'));
  $form_state->set('flb__uuid', $form_state->get('layout_builder__component')->getUuid());
  $form_state->set('flb__delta', $delta);

  _flexilayout_builder_layout_builder_block_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flexilayout_builder_form_layout_builder_update_block_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\layout_builder\SectionStorageInterface $section_storage */
  list($section_storage, $delta, $region, $uuid) = $form_state->getBuildInfo()['args'];
  $form_state->set('section_storage', $section_storage);
  $form_state->set('flb__component', $section_storage->getSection($delta)->getComponent($uuid));
  $form_state->set('flb__uuid', $uuid);
  $form_state->set('flb__delta', $delta);

  _flexilayout_builder_layout_builder_block_form_alter($form, $form_state);
}

/**
 * Add magical extra things to the block form.
 *
 * Currently supported magic:
 *   - block_classes
 *   - field_label_overrides
 *
 * Still to implement:
 *   - Visibility rules
 *   - Output styles
 */
function _flexilayout_builder_layout_builder_block_form_alter(array &$form, FormStateInterface $form_state) {
  $form['actions']['#weight'] = 1000;
  $form['flexilayout_builder'] = [
    '#type' => 'container',
  ];

  $class = $form_state->get('flb__component') ? $form_state->get('flb__component')->get('class') : '';
  $form['flexilayout_builder']['class'] = [
    '#type' => 'textfield',
    '#title' => t('Block Classes'),
    '#default_value' => $class,
  ];

  /** @var \Drupal\layout_builder\SectionComponent $component */
  if (($component = $form_state->get('flb__component')) && ($component->getPlugin() instanceof EntityField || $component->getPlugin() instanceof FieldBlock)) {
    $form['flexilayout_builder']['field_label_override'] = [
      '#type' => 'checkbox',
      '#title' => t('Use Block Title as Field Label'),
      '#default_value' => $component->get('field_label_override'),
    ];
  }

  array_unshift($form['#submit'], '_flexilayout_builder_layout_builder_block_form_submit');
}

/**
 * Submit.
 */
function _flexilayout_builder_layout_builder_block_form_submit(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValue('flexilayout_builder');
  $component = $form_state->get('section_storage')
    ->getSection($form_state->get('flb__delta'))
    ->getComponent($form_state->get('flb__uuid'));

  $component->set('class', $values['class']);
  $component->set('field_label_override', $values['field_label_override']);
}
